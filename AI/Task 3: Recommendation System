#TASK 3: (TASK 4) RECOMMENDATION SYSTEM
 
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

def get_movie_recommendations(user_genre):
    # Movie data with more movies and genres
    movies = [
        {'title': 'The Shawshank Redemption', 'genre': 'Drama'},
        {'title': 'Inception', 'genre': 'Sci-Fi Action'},
        {'title': 'The Dark Knight', 'genre': 'Action Crime'},
        {'title': 'Forrest Gump', 'genre': 'Drama Romance'},
        {'title': 'Pulp Fiction', 'genre': 'Crime'},
        {'title': 'The Godfather', 'genre': 'Crime Drama'},
        {'title': 'The Matrix', 'genre': 'Sci-Fi Action'},
        {'title': 'Schindler\'s List', 'genre': 'Biography Drama'},
        {'title': 'Titanic', 'genre': 'Romance Drama'},
        {'title': 'The Silence of the Lambs', 'genre': 'Crime Thriller'},
        {'title': 'The Avengers', 'genre': 'Action Adventure'},
        {'title': 'Jurassic Park', 'genre': 'Adventure Sci-Fi'},
        {'title': 'The Lion King', 'genre': 'Animation Adventure'},
        {'title': 'Inglourious Basterds', 'genre': 'Adventure Drama'},
        {'title': 'The Social Network', 'genre': 'Biography Drama'},
        {'title': 'The Grand Budapest Hotel', 'genre': 'Adventure Comedy'},
        {'title': 'La La Land', 'genre': 'Comedy Drama Music'},
        {'title': 'The Shawshank Redemption', 'genre': 'Drama'},
        {'title': 'The Departed', 'genre': 'Crime Drama Thriller'},
        {'title': 'Gladiator', 'genre': 'Action Drama'},
        {'title': 'The Revenant', 'genre': 'Action Adventure Drama'},
        {'title': 'Eternal Sunshine of the Spotless Mind', 'genre': 'Drama Romance Sci-Fi'},
        {'title': 'The Martian', 'genre': 'Adventure Drama Sci-Fi'},
        {'title': 'Memento', 'genre': 'Mystery Thriller'},
        {'title': 'The Princess Bride', 'genre': 'Adventure Family Fantasy'},
        {'title': 'Blade Runner', 'genre': 'Action Sci-Fi Thriller'},
        {'title': 'Casablanca', 'genre': 'Drama Romance War'},
        {'title': 'The Shawshank Redemption', 'genre': 'Drama'},
        {'title': 'Gone with the Wind', 'genre': 'Drama History Romance'},
        {'title': 'The Wizard of Oz', 'genre': 'Adventure Family Fantasy'},
        # Add more movies as needed
    ]

    # User preferences
    user_preferences = {'genre': user_genre}

    # Convert movie data to a format suitable for TfidfVectorizer
    movie_titles = [movie['title'] for movie in movies]
    movie_genres = [movie['genre'] for movie in movies]

    # Combine title and genre information into a single string
    movie_descriptions = [f"{title} {genre}" for title, genre in zip(movie_titles, movie_genres)]

    # Initialize TfidfVectorizer
    tfidf_vectorizer = TfidfVectorizer()

    # Fit and transform the data
    tfidf_matrix = tfidf_vectorizer.fit_transform(movie_descriptions)

    # Transform user preferences
    user_preferences_vector = tfidf_vectorizer.transform([f"{user_preferences['genre']}"])

    # Calculate the cosine similarity between user preferences and movies
    cosine_similarities = linear_kernel(user_preferences_vector, tfidf_matrix).flatten()

    # Get movie recommendations based on similarity scores
    recommendations = [
        (title, similarity)
        for title, similarity in zip(movie_titles, cosine_similarities)
    ]

    # Sort recommendations by similarity score
    recommendations.sort(key=lambda x: x[1], reverse=True)

    # Output based on the new data and preferences
    print("---------------------------------------------------")
    print("\nTop movie recommendations:")
    top_recommendations = [title for title, similarity in recommendations[:5] if similarity > 0]
    if top_recommendations:
        for i, title in enumerate(top_recommendations):
            print(f"{i + 1}. {title}")
        print("---------------------------------------------------")
    else:
        print("No top recommendations based on user preferences.")
        print("---------------------------------------------------")

    # Display other movies
    other_movies = [title for title, similarity in recommendations[5:] if similarity > 0]
    if other_movies:
        print("\nOther Movies:")
        for title in other_movies:
            print(f"- {title}")
    print("---------------------------------------------------")
    x=input("Do you want search for other recommendations? ")
    if x=='yes' or x=='YES' or x=='Yes':
        main()
    else:
        print("GOODBYE!! HAVE A GOOD DAY!! ")
        print("---------------------------------------------------")

def get_book_recommendations(user_genre):
    # Book data
    books = [
        {'title': 'To Kill a Mockingbird', 'genre': 'Fiction'},
        {'title': '1984', 'genre': 'Dystopian'},
        {'title': 'The Great Gatsby', 'genre': 'Classic'},
        {'title': 'Harry Potter and the Sorcerer\'s Stone', 'genre': 'Fantasy'},
        {'title': 'The Catcher in the Rye', 'genre': 'Coming of Age'},
        {'title': 'Pride and Prejudice', 'genre': 'Romance'},
        {'title': 'The Hobbit', 'genre': 'Adventure Fantasy'},
        {'title': 'The Da Vinci Code', 'genre': 'Mystery Thriller'},
        {'title': 'The Hunger Games', 'genre': 'Young Adult Dystopian'},
        {'title': 'The Alchemist', 'genre': 'Fantasy Adventure'},
        {'title': 'The Girl on the Train', 'genre': 'Mystery Thriller'},
        {'title': 'The Lord of the Rings', 'genre': 'High Fantasy'},
        {'title': 'Jane Eyre', 'genre': 'Gothic Romance'},
        {'title': 'The Shining', 'genre': 'Horror'},
        {'title': 'The Hitchhiker\'s Guide to the Galaxy', 'genre': 'Science Fiction Comedy'},
        {'title': 'The Chronicles of Narnia', 'genre': 'Fantasy Adventure'},
        {'title': 'Gone Girl', 'genre': 'Mystery Thriller'},
        {'title': 'Dune', 'genre': 'Science Fiction'},
        {'title': 'The Fault in Our Stars', 'genre': 'Young Adult Romance'},
        {'title': 'Brave New World', 'genre': 'Dystopian'},
        {'title': 'The Handmaid\'s Tale', 'genre': 'Dystopian'},
        {'title': 'The Martian', 'genre': 'Science Fiction'},
        {'title': 'Moby-Dick', 'genre': 'Classic Adventure'},
        {'title': 'The Picture of Dorian Gray', 'genre': 'Gothic Horror'},
        {'title': 'The Road', 'genre': 'Post-Apocalyptic'},
        {'title': 'The Count of Monte Cristo', 'genre': 'Adventure'},
        {'title': 'The Grapes of Wrath', 'genre': 'Historical Fiction'},
        {'title': 'The War of the Worlds', 'genre': 'Sci-Fi'},
        {'title': 'The Secret Garden', 'genre': 'Children\'s Literature'},
        {'title': 'One Hundred Years of Solitude', 'genre': 'Magical Realism'},
        {'title': 'The Adventures of Sherlock Holmes', 'genre': 'Mystery'},
        {'title': 'The Stand', 'genre': 'Horror'},
        {'title': 'The Wind in the Willows', 'genre': 'Children\'s Fantasy'},
        {'title': 'The Odyssey', 'genre': 'Epic Poetry'},
        {'title': 'The Catch-22', 'genre': 'Satirical War Novel'},
        # Add more books as needed
    ]

    # User preferences
    user_preferences = {'genre': user_genre}

    # Convert book data to a format suitable for TfidfVectorizer
    book_titles = [book['title'] for book in books]
    book_genres = [book['genre'] for book in books]

    # Combine title and genre information into a single string
    book_descriptions = [f"{title} {genre}" for title, genre in zip(book_titles, book_genres)]

    # Initialize TfidfVectorizer
    tfidf_vectorizer_books = TfidfVectorizer()

    # Fit and transform the data
    tfidf_matrix_books = tfidf_vectorizer_books.fit_transform(book_descriptions)

    # Transform user preferences
    user_preferences_vector_books = tfidf_vectorizer_books.transform([f"{user_preferences['genre']}"])

    # Calculate the cosine similarity between user preferences and books
    cosine_similarities_books = linear_kernel(user_preferences_vector_books, tfidf_matrix_books).flatten()

    # Get book recommendations based on similarity scores
    book_recommendations = [
        (title, similarity)
        for title, similarity in zip(book_titles, cosine_similarities_books)
    ]

    # Sort recommendations by similarity score
    book_recommendations.sort(key=lambda x: x[1], reverse=True)

    # Output based on the user preferences
    print("---------------------------------------------------")
    print("\nTop book recommendations:")
    top_book_recommendations = [title for title, similarity in book_recommendations[:5] if similarity > 0]
    if top_book_recommendations:
        for i, title in enumerate(top_book_recommendations):
            print(f"{i + 1}. {title}")
        print("---------------------------------------------------")
    else:
        print("No top book recommendations based on user preferences.")
        print("---------------------------------------------------")

    # Display other books
    other_books = [title for title, similarity in book_recommendations[5:] if similarity > 0]
    if other_books:
        print("\nOther Books:")
        for title in other_books:
            print(f"- {title}")
    print("---------------------------------------------------")
    x=input("Do you want search for other recommendations? ")
    if x=='yes' or x=='YES' or x=='Yes':
        main()
    else:
        print("GOODBYE!! HAVE A GOOD DAY!! ")
        print("---------------------------------------------------")


def get_product_recommendations(user_category):
    # Product data
    products = [
        {'name': 'Laptop', 'category': 'Electronics'},
        {'name': 'Coffee Maker', 'category': 'Kitchen Appliances'},
        {'name': 'Running Shoes', 'category': 'Footwear'},
        {'name': 'Smartphone', 'category': 'Electronics'},
        {'name': 'Cookware Set', 'category': 'Kitchen'},
        {'name': 'Fitness Tracker', 'category': 'Fitness'},
        {'name': 'Headphones', 'category': 'Electronics'},
        {'name': 'Backpack', 'category': 'Fashion'},
        {'name': 'Blender', 'category': 'Kitchen Appliances'},
        {'name': 'Dumbbell Set', 'category': 'Fitness'},
        {'name': 'Desk Chair', 'category': 'Furniture'},
        {'name': 'Digital Camera', 'category': 'Electronics'},
        {'name': 'Yoga Mat', 'category': 'Fitness'},
        {'name': 'Sneakers', 'category': 'Footwear'},
        {'name': 'Bedding Set', 'category': 'Home Decor'},
        {'name': 'Gaming Console', 'category': 'Electronics'},
        {'name': 'Tea Kettle', 'category': 'Kitchen Appliances'},
        {'name': 'Outdoor Grill', 'category': 'Outdoor'},
        {'name': 'Smartwatch', 'category': 'Electronics'},
        {'name': 'Backyard Furniture Set', 'category': 'Outdoor'},
        {'name': 'Smart Home Security System', 'category': 'Home Improvement'},
        {'name': 'Portable Bluetooth Speaker', 'category': 'Electronics'},
        {'name': 'Air Fryer', 'category': 'Kitchen Appliances'},
        {'name': 'Robot Vacuum Cleaner', 'category': 'Home Appliances'},
        {'name': 'Wireless Earbuds', 'category': 'Electronics'},
        {'name': 'Camping Tent', 'category': 'Outdoor'},
        {'name': 'Electric Toothbrush', 'category': 'Personal Care'},
        {'name': 'Digital Drawing Tablet', 'category': 'Art and Design'},
        {'name': 'Tool Set', 'category': 'Home Improvement'},
        {'name': 'Wireless Router', 'category': 'Networking'},
        {'name': 'Sunglasses', 'category': 'Fashion Accessories'},
        {'name': 'Instant Pot', 'category': 'Kitchen Appliances'},
        {'name': 'Electric Scooter', 'category': 'Outdoor'},
        {'name': 'Fitness Smartwatch', 'category': 'Fitness'},
        {'name': 'Portable Charger', 'category': 'Electronics'},
        {'name': 'Candle Set', 'category': 'Home Decor'},
        {'name': 'Electric Shaver', 'category': 'Personal Care'},
        {'name': 'Power Drill', 'category': 'Tools'},
        {'name': 'Indoor Plants', 'category': 'Home Decor'},
        {'name': 'Wireless Keyboard and Mouse', 'category': 'Computers'},
        {'name': 'Duffle Bag', 'category': 'Fashion'},
        {'name': 'Coffee Table', 'category': 'Furniture'},
        {'name': 'Hiking Boots', 'category': 'Footwear'},
        {'name': 'Water Bottle', 'category': 'Outdoor'},
        # Add more products as needed
    ]

    # User preferences
    user_preferences = {'category': user_category}

    # Convert product data to a format suitable for TfidfVectorizer
    product_names = [product['name'] for product in products]
    product_categories = [product['category'] for product in products]

    # Combine name and category information into a single string
    product_descriptions = [f"{name} {category}" for name, category in zip(product_names, product_categories)]

    # Initialize TfidfVectorizer
    tfidf_vectorizer_products = TfidfVectorizer()

    # Fit and transform the data
    tfidf_matrix_products = tfidf_vectorizer_products.fit_transform(product_descriptions)

    # Transform user preferences
    user_preferences_vector_products = tfidf_vectorizer_products.transform([f"{user_preferences['category']}"])

    # Calculate the cosine similarity between user preferences and products
    cosine_similarities_products = linear_kernel(user_preferences_vector_products, tfidf_matrix_products).flatten()

    # Get product recommendations based on similarity scores
    product_recommendations = [
        (name, similarity)
        for name, similarity in zip(product_names, cosine_similarities_products)
    ]

    # Sort recommendations by similarity score
    product_recommendations.sort(key=lambda x: x[1], reverse=True)

    # Output based on the user preferences
    print("---------------------------------------------------")
    print("\nTop product recommendations:")
    top_product_recommendations = [name for name, similarity in product_recommendations[:5] if similarity > 0]
    if top_product_recommendations:
        for i, name in enumerate(top_product_recommendations):
            print(f"{i + 1}. {name}")
        print("---------------------------------------------------")
    else:
        print("No top product recommendations based on user preferences.")
        print("---------------------------------------------------")

    # Display other products
    other_products = [name for name, similarity in product_recommendations[5:] if similarity > 0]
    if other_products:
        print("\nOther Products:")
        for name in other_products:
            print(f"- {name}")
    print("---------------------------------------------------")
    x=input("Do you want to search for other recommendations? ")
    if x=='yes' or x=='YES' or x=='Yes':
        main()
    else:
        print("---------------------------------------------------")
        print("GOODBYE!! HAVE A GOOD DAY!! ")
        print("---------------------------------------------------")
print("***************************************************")   
print("\t-------RECOMMENDATONS-------")
print("***************************************************")
def main():
    # Get user input for recommendation type
    recommendation_type = input("What type of recommendations would you like? (Movies, Books, Products): ").lower()

    # Get user input for genre/category preference
    user_preference = input("Enter your preferred genre/category: ")

    # Call the respective function based on user input
    if recommendation_type == 'movies':
        get_movie_recommendations(user_preference)
    elif recommendation_type == 'books':
        get_book_recommendations(user_preference)
    elif recommendation_type == 'products':
        get_product_recommendations(user_preference)
    else:
        print("Invalid recommendation type. Please choose Movies, Books, or Products.")
        main()

main()
